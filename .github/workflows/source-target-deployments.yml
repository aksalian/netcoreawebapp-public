name: Env specific - Source Target Fetch Environment Variables

on:
  # push:
  #   branches:
  #     - "main"
  workflow_dispatch:
    inputs:
        source_env:
          description: Source Env.
          type: choice
          options:
            - develop
            - integration
            - prod
          required: true
          default: develop
        dest_env:
          description: Destination Env.
          type: choice
          options:
            - develop
            - integration
            - prod
          required: true
          default: integration
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

  source_env:
    name: Fetch Vars from ${{ github.event.inputs.source_env }} environment
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      o_source_env: ${{ steps.s_env.outputs.source_azure_region }}
      o_source_vm: ${{ steps.s_env.outputs.source_azure_vm }}
    needs: build
    if: contains(fromJSON('["develop", "integration", "main"]'), github.ref_name) 
   
    environment:
      name: ${{ github.event.inputs.source_env }}

    steps:
      - name: Set the source env. values
        id: s_env
        shell: bash
        run: |
          echo "source_azure_region= ${{ vars.AZURE_REGION }}"  >> $GITHUB_OUTPUT
          echo "source_azure_vm= ${{ vars.AZURE_VMNAME }}"  >> $GITHUB_OUTPUT
          
          echo "Display Source Azure Region from Environment Settings = " ${{ vars.AZURE_REGION }}
          echo "Display Source VM Name from Environment Settings = " ${{ vars.AZURE_VMNAME }}

      # this is technically not necessary, but it's useful for debugging
      - name: Print variables to console
        run: |
          echo source region from outputs  is: ${{ steps.s_env.outputs.source_azure_region }}
          echo source vm from outputs is: ${{ steps.s_env.outputs.source_azure_vm }}


  dest_env:
    name: Fetch Vars from ${{ github.event.inputs.dest_env }} environment
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      o_dest_env: ${{ steps.d_env.outputs.dest_azure_region }}
      o_dest_vm: ${{ steps.d_env.outputs.dest_azure_vm }}
    needs: build
    if: contains(fromJSON('["develop", "integration", "main"]'), github.ref_name) 
      
    environment:
      name: ${{ github.event.inputs.dest_env }}

    steps:
      - name: Set the destination env. values
        id: d_env
        shell: bash
        run: |
          echo "dest_azure_region= ${{ vars.AZURE_REGION }}"  >> $GITHUB_OUTPUT
          echo "dest_azure_vm= ${{ vars.AZURE_VMNAME }}"  >> $GITHUB_OUTPUT
                    
          echo "Display Destination Azure Region from Environment Settings = " ${{ vars.AZURE_REGION }}
          echo "Display Destination VM Name from Environment Settings = " ${{ vars.AZURE_VMNAME }}

      # this is technically not necessary, but it's useful for debugging
      - name: Print variables to console
        run: |
          echo source region from outputs is: ${{ steps.d_env.outputs.dest_azure_region }}
          echo source vm from outputs is: ${{ steps.d_env.outputs.dest_azure_vm }}

  target_env:
    name: Deploy to ${{ github.event.inputs.dest_env }} environment using the above source & dest values
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [source_env, dest_env]
    if: contains(fromJSON('["develop", "integration", "main"]'), github.ref_name) 

    environment:
      name: ${{ github.event.inputs.dest_env }}

    env:
      SOURCE_AZ_REGION : ${{ needs.source_env.outputs.o_source_env }}
      DESTINATION_AZ_REGION : ${{ needs.source_env.outputs.o_dest_env }}
      SOURCE_VM : ${{ needs.source_env.outputs.o_source_vm }}
      DESTINATION_VM : ${{ needs.source_env.outputs.o_dest_vm }}

    steps:
      # this is technically not necessary, but it's useful for debugging
      - name: Print variables to console
        run: |
          echo Target source region is: ${{ needs.source_env.outputs.o_source_env }} # ${{ env.SOURCE_AZ_REGION }}
          echo Target source vm is: ${{ needs.source_env.outputs.o_source_vm }} # ${{ env.SOURCE_VM }}
          echo Target destination region is: ${{ needs.dest_env.outputs.o_dest_env }} # ${{ env.DESTINATION_AZ_REGION }}
          echo Target destination vm is: ${{ needs.dest_env.outputs.o_dest_vm }} # ${{ env.DESTINATION_VM }}
